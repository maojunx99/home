(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{435:function(t,s,a){t.exports=a.p+"assets/img/rdbms_arc.6b9bb899.png"},436:function(t,s,a){t.exports=a.p+"assets/img/rdbms_query_planning_architecture.67b1dcfe.png"},437:function(t,s,a){t.exports=a.p+"assets/img/syntax_tree.11078d98.png"},438:function(t,s,a){t.exports=a.p+"assets/img/logical_planning_opt_0.f0ebaec4.png"},439:function(t,s,a){t.exports=a.p+"assets/img/logical_planning_opt_1.f80d708a.png"},440:function(t,s,a){t.exports=a.p+"assets/img/logical_planning_opt_2.c080749d.png"},441:function(t,s,a){t.exports=a.p+"assets/img/logical_planning_opt_3.11e5fdee.png"},442:function(t,s,a){t.exports=a.p+"assets/img/logical_planning_opt_4.7799de57.png"},463:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"rdbms-architecture-overview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rdbms-architecture-overview"}},[t._v("#")]),t._v(" RDBMS Architecture Overview")]),t._v(" "),s("p",[s("img",{attrs:{src:a(435),alt:"overall_arc"}})]),t._v(" "),s("p",[t._v("Five detailed levels, in my view,\nBuffer Pool Manager + Disk Manger -> Storage Engine,\nOperator Execution + Access Methods -> Execution Engine,\nQuery Planning -> SQL Parser Engine")]),t._v(" "),s("h2",{attrs:{id:"query-planning"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#query-planning"}},[t._v("#")]),t._v(" Query Planning")]),t._v(" "),s("p",[s("img",{attrs:{src:a(436),alt:""}}),t._v(" "),s("strong",[t._v("Parser")]),t._v(" (output: abstract syntax tree)")]),t._v(" "),s("p",[t._v("What is abstract syntax tree?")]),t._v(" "),s("p",[t._v("生成的语法树就是一个保留原语句的结构化的树。比如，把下面示例语句编译成语法树")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\nclassrCOUNT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" max id\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" min id\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\nclass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nid\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\nstudentWHERE\ngender "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("'female\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v("\nclass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("语法树be like:")]),t._v(" "),s("p",[s("img",{attrs:{src:a(437),alt:""}})]),t._v(" "),s("p",[t._v("值得注意的是，parser只能检查语法和词法，比如SELECT拼写，多余的标点符号。")]),t._v(" "),s("p",[s("strong",[t._v("Binder")]),t._v(" (output: bounded syntax tree -> logical plan)")]),t._v(" "),s("p",[t._v("首先两步走，第一步生成受限语法树，syntax没法检查出语义错误，比如select from不存在的表，不存在的属性，错误的表达式类型等等，这就需要binder去把syntax中的关键字和数据库的元数据（metadata）进行绑定，从而赋予语义（semantic）。第二步，binder用关系代数运算符去替换syntax tree上的节点和结构，生成逻辑查询计划，也就是"),s("strong",[t._v("关系代数表达式")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("Tree Rewiter")]),t._v(" (output: optimized logical plan)")]),t._v(" "),s("ol",[s("li",[t._v("模式匹配来去掉或者合并一些condition。")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("利用代数定律优化逻辑查询计划，获得逻辑计划2.0.\n以此sql为例，展示四个最常见的优化方法：")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ARTIST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NAME\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ARTIST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" APPEARS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ALBUM\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" ARTIST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("APPEARS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ARTIST_ID\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" APPEARS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ALBUM_ID"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ALBUM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" ALBUM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Andy\'s OG Remix"')]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:a(438),alt:""}})]),t._v(" "),s("ol",[s("li",[t._v("Split Conjunctive Predicates 条件分解\n"),s("img",{attrs:{src:a(439),alt:""}})]),t._v(" "),s("li",[t._v("Predicate Pushdown 选择下推\n"),s("img",{attrs:{src:a(440),alt:""}})]),t._v(" "),s("li",[t._v("Replace Cartesian Products with Joins 积运算换成等值连接\n"),s("img",{attrs:{src:a(441),alt:""}})]),t._v(" "),s("li",[t._v("Projection Pushdown 投影下推\n"),s("img",{attrs:{src:a(442),alt:""}})])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/jason-t/p/16113027.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("逻辑计划生成参考"),s("OutboundLink")],1),t._v("：\n"),s("em",[s("strong",[t._v("https://www.cnblogs.com/jason-t/p/16113027.html")])])]),t._v(" "),s("p",[s("strong",[t._v("Optimizer")]),t._v(" (output: physical plan)\n这一部分由逻辑计划派生得到多个物理计划，如何对多个物理计划进行评估选择，是optimizer需要做的。\n两类优化方法，通常结合起来")]),t._v(" "),s("ol",[s("li",[t._v("Heuristics / Rules 启发式优化/固定规则； 上面的逻辑计划优化中就使用的启发式规则，说白了就是静态固定的优化逻辑。在物理计划的优化中同样可以用启发式方法来选择更优的物理计划。")]),t._v(" "),s("li",[t._v("Cost Model and Cost-based Optimization 基于代价模型的优化 两个部分：如何建立代价模型； 如何进行选择。")])]),t._v(" "),s("h2",{attrs:{id:"operator-execution"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#operator-execution"}},[t._v("#")]),t._v(" Operator Execution")]),t._v(" "),s("p",[s("strong",[t._v("Execution Model:")])]),t._v(" "),s("ol",[s("li",[t._v("Iterator Model Also called Volcano / Pipeline Model 迭代/火山/流水线模型")])]),t._v(" "),s("p",[t._v("每个操作符都实现Next()方法，父节点通过for循环调用子节点迭代返回元组。有些操作符比如join, subqueries, order by例外，需要阻塞到子节点返回全部元组。"),s("strong",[t._v("最常用的模型")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("Materialization Model")])]),t._v(" "),s("p",[t._v("每个操作符一次性全输入，一次性全输出。适合"),s("strong",[t._v("OLTP")]),t._v(",小数据量，可以较少调用的overhead。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("Vectorized / Batch Model")])]),t._v(" "),s("p",[t._v("批量输入，批量输出。每次next()返回的是多行元组。利用CPU的SIMD向量化特性，也就是Spatial Locality的特性。"),s("strong",[t._v("OLAP")]),t._v("最爱。计算密集型。所以向量化的缺点是什么？可能的答案：火山模型的输出控制更容易，对于OLTP数据库向量化带来的提升有限？")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("向量化+编译执行\n貌似是比较新的优化执行方法，mark"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/63996040",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇文章"),s("OutboundLink")],1),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"access-methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-methods"}},[t._v("#")]),t._v(" Access Methods")]),t._v(" "),s("h2",{attrs:{id:"buffer-pool-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#buffer-pool-manager"}},[t._v("#")]),t._v(" Buffer Pool Manager")]),t._v(" "),s("h2",{attrs:{id:"disk-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#disk-manager"}},[t._v("#")]),t._v(" Disk Manager")])])}),[],!1,null,null,null);s.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{443:function(t,e,a){t.exports=a.p+"assets/img/shared_nothing.aa86df1e.png"},444:function(t,e,a){t.exports=a.p+"assets/img/storage-disaggregation.c4274f51.png"},464:function(t,e,a){"use strict";a.r(e);var r=a(2),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("Ideas in this passage are in terms of large scale of data. "),e("strong",[t._v("OLAP")])]),t._v(" "),e("h2",{attrs:{id:"most-base-architecture-idea"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#most-base-architecture-idea"}},[t._v("#")]),t._v(" Most Base Architecture Idea")]),t._v(" "),e("p",[e("img",{attrs:{src:a(443),alt:""}})]),t._v(" "),e("p",[t._v("shared nothing\n每个节点都有自己的内存和存储，以及独立的I/O接口。每个节点通过高速的内部网络与其他节点通信同步。对于低延迟，高带宽和高可得性等网络指标有高要求。数据被水平切分到各个节点。过去最流行的结构，查询效率很高，但是迁移效率比较低。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(444),alt:""}})]),t._v(" "),e("p",[t._v("shared storage / disaggregated storage\n存算分离是现在云上OLAP系统最流行的架构。存算分离这个概念属于shared storage的范畴（细微差别在于，shared storage的存储节点没有基本的计算能力），存储节点和计算节点完全解耦，计算节点是分布式的，存储节点对外是一个整体，可以看作计算节点共享存储节点。好处是1. 可以利用设备异构的特点，将计算能力强的设备和IO能力强的设备分离。2. 数据迁移不影响计算服务。")]),t._v(" "),e("p",[t._v("存算分离的瓶颈在于计算-存储之间的网络，有两种解决方法："),e("em",[t._v("caching")]),t._v("和"),e("em",[t._v("computation pushdown")]),t._v(".")]),t._v(" "),e("p",[e("strong",[t._v("计算下推：")])]),t._v(" "),e("p",[t._v("下推是常见的优化思路，在单机DBMS里，下推是将filter/project算子在关系代数树中尽量下移，尽早地减小数据集的大小，从而减小开销。那么在分布式DBMS里，计算下推指计算节点将查询下发到存储节点上执行。TP类查询对计算资源要求低，可以下推到存储节点，AP类查询如果下推过多复杂算子到存储节点，并且中间数据集也没有显著减小，反而会造成总体效率降低。具体的介绍见"),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/366312701",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"architecture-in-practice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#architecture-in-practice"}},[t._v("#")]),t._v(" Architecture in Practice")]),t._v(" "),e("p",[e("strong",[t._v("MapReduce")]),t._v(": Computing Engine. Offers parallelization, fault-tolerance, data distribution,\nand load balancing")]),t._v(" "),e("p",[e("strong",[t._v("Google File System (GFS)")]),t._v(": Storage, No backup")]),t._v(" "),e("p",[e("strong",[t._v("Hadoop")]),t._v(": MapReduce + Hadoop File System (HDFS)")]),t._v(" "),e("p",[e("strong",[t._v("Spark")]),t._v(": In memory MapReduce")]),t._v(" "),e("p",[e("strong",[t._v("Ray")]),t._v(": Lower level computing framework.\n• Flexible computing framework\n• better version of RPC\n• Distributed object store\n• Plasma Object Store for zero-copy operations\n• Used by ChatGPT")])])}),[],!1,null,null,null);e.default=s.exports}}]);